@page "/register"
@using BlazorServerAuthenticationAndAuthorization.Authentication
@using BlazorServerAuthenticationAndAuthorization.Data
@using Microsoft.AspNetCore.Components.Forms
@inject UserAccountService UserAccountService
@inject NavigationManager Navigation

<EditForm Model="newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-container">
        <p class="title">Create a New Account</p>
        <div class="form">
            <div>
                <InputText class="input" placeholder="Email" @bind-Value="newUser.Email" />
                @if (!string.IsNullOrEmpty(emailMessage))
                {
                    <div class="error-message">@emailMessage</div>
                }
            </div>
            <div>
                <InputText class="input" placeholder="Username" @bind-Value="newUser.UserName" />
            </div>
            <div>
                <InputText class="input" placeholder="Password" type="password" @bind-Value="newUser.Password" />
            </div>
            <div>
                <InputSelect class="input" @bind-Value="newUser.Role">
                    <option value="User">User</option>
                    <option value="Administrator">Administrator</option>
                </InputSelect>
            </div>
            <button type="submit" class="form-btn">Register</button>
        </div>
        <p class="sign-up-label">
            Already have an account? <span class="sign-up-link" @onclick="NavigateToLogin">Login here</span>
        </p>
    </div>
</EditForm>

@code {
    private UserInfo newUser = new UserInfo();

    private string emailMessage = string.Empty;



    private async Task HandleValidSubmit()

    {

        if (string.IsNullOrEmpty(newUser.Email))

        {

            emailMessage = "Email is required.";

            return;

        }



        var existingUser = await UserAccountService.GetByEmailAsync(newUser.Email);

        if (existingUser != null)

        {

            emailMessage = "Email already exists.";

        }

        else

        {

            var result = await UserAccountService.CreateUserAsync(newUser);

            if (result)

            {

                Navigation.NavigateTo("/login");

            }

        }

    }



    private void NavigateToLogin()

    {

        Navigation.NavigateTo("/login");

    }
}

<style>
    .form-container {
        width: 350px;
        background-color: #fff;
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        border-radius: 10px;
        padding: 20px 30px;
        margin: auto;
    }

    .title {
        text-align: center;
        font-family: "Lucida Sans", Geneva, Verdana, sans-serif;
        margin: 10px 0 30px 0;
        font-size: 28px;
        font-weight: 800;
    }

    .form {
        display: flex;
        flex-direction: column;
        gap: 18px;
        margin-bottom: 15px;
    }

    .input {
        border-radius: 20px;
        border: 1px solid #c0c0c0;
        outline: 0;
        padding: 12px 15px;
        width: 100%;
    }

    .form-btn {
        padding: 10px 15px;
        border-radius: 20px;
        border: 0;
        background: teal;
        color: white;
        cursor: pointer;
        box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
    }

        .form-btn:hover {
            background: #005f5f;
        }

    .sign-up-label {
        text-align: center;
        font-size: 14px;
        margin: 15px 0;
        color: #555;
    }

    .sign-up-link {
        font-weight: 600;
        color: #02b3b0;
        cursor: pointer;
    }

    .error-message {
        color: red;
        margin-top: 5px;
    }
</style>
