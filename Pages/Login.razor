@page "/login"
@using BlazorServerAuthenticationAndAuthorization.Authentication
@using BlazorServerAuthenticationAndAuthorization.Model
@using BlazorServerAuthenticationAndAuthorization.Data
@inject UserAccountService UserAccountService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<div class="form-container">
    <p class="title">Welcome back</p>
    <EditForm Model="loginUser" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form">
            <div>
                <InputText class="input" placeholder="Username" @bind-Value="loginUser.UserName" />
            </div>
            <div>
                <InputText class="input" placeholder="Password" type="password" @bind-Value="loginUser.Password" />
                <p class="page-link">
                    <span class="page-link-label">Forgot Password?</span>
                </p>
            </div>
            <button type="submit" class="form-btn">Log in</button>
        </div>
    </EditForm>
    <p class="sign-up-label">
        Don't have an account? <span class="sign-up-link" @onclick="NavigateToSignUp">Sign up</span>
    </p>
</div>

@code {
    private UserInfo loginUser = new UserInfo();



    private string loginMessage = string.Empty;



    private async Task HandleValidSubmit()

    {

        if (string.IsNullOrEmpty(loginUser.UserName) || string.IsNullOrEmpty(loginUser.Password))

        {

            loginMessage = "Username and password are required.";

            return;

        }



        var user = await UserAccountService.GetByUserNameAsync(loginUser.UserName);



        if (user != null && user.Password == loginUser.Password)

        {

            var userSession = new UserSession

                {

                    UserName = user.UserName,

                    Email = user.Email,

                    Role = user.Role

                };



            await AuthenticationStateProvider.UpdateAuthenticationState(userSession);

            Navigation.NavigateTo("/");

        }

        else

        {

            loginMessage = "Invalid username or password.";

        }

    }



    private void NavigateToSignUp()

    {

        Navigation.NavigateTo("/register");

    }
}

<style>
    .form-container {
        width: 350px;
        background-color: #fff;
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        border-radius: 10px;
        padding: 20px 30px;
        margin: auto;
    }

    .title {
        text-align: center;
        font-family: "Lucida Sans", Geneva, Verdana, sans-serif;
        margin: 10px 0 30px 0;
        font-size: 28px;
        font-weight: 800;
    }

    .form {
        display: flex;
        flex-direction: column;
        gap: 18px;
        margin-bottom: 15px;
    }

    .input {
        border-radius: 20px;
        border: 1px solid #c0c0c0;
        outline: 0;
        padding: 12px 15px;
        width: 100%;
    }

    .page-link {
        text-align: right;
        margin-top: 5px;
    }

    .page-link-label {
        font-size: 10px;
        color: #747474;
        cursor: pointer;
    }

        .page-link-label:hover {
            color: #000;
        }

    .form-btn {
        padding: 10px 15px;
        border-radius: 20px;
        border: 0;
        background: teal;
        color: white;
        cursor: pointer;
        box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
    }

        .form-btn:hover {
            background: #005f5f;
        }

    .sign-up-label {
        text-align: center;
        font-size: 14px;
        margin: 15px 0;
        color: #555;
    }

    .sign-up-link {
        font-weight: 600;
        color: #02b3b0;
        cursor: pointer;
    }
</style>
